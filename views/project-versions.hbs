<!DOCTYPE html>
<html>
<head>
    <meta name="ap-local-base-url" content="{{localBaseUrl}}">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="ap-local-base-url" content="{{localBaseUrl}}">

    <link rel="stylesheet" href="//aui-cdn.atlassian.com/aui-adg/5.9.17/css/aui.min.css" media="all">
    <link rel="stylesheet" href="//aui-cdn.atlassian.com/aui-adg/5.9.17/css/aui-experimental.css" media="all">
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script src="//aui-cdn.atlassian.com/aui-adg/5.9.17/js/aui.min.js"></script>
    <script src="//aui-cdn.atlassian.com/aui-adg/5.9.17/js/aui-experimental.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
    <script src="{{parentUrl}}/atlassian-connect/all.js" type="text/javascript"></script>
</head>

<body class="aui-page-hybrid">
    <div id="project-releases" class="aui-item"></div>
<script type="text/underscore-template" id="projectTableRow">
    <tr>
      <td data-sort-value='<%=project.name%>'><a href="{{parentUrl}}/projects/<%=project.key%>"><%=project.name%></a></td>
      <td>
        <% if (project.currentVersion) { %>
          <a href="{{parentUrl}}/projects/<%=project.key%>/versions/<%=project.currentVersion.id%>"><%=project.currentVersion.name%></a>
        <% } else { %>
        - None -
        <% } %>
      </td>
      <td data-sort-value="<%=project.currentVersion ? project.currentVersion.releaseDate : ''%>">
        <% if (project.currentVersion) { %>
          <%=project.currentVersion.prettyReleaseDate ? project.currentVersion.prettyReleaseDate : 'not set'%>
        <% } %>
      </td>
      <td>
        <% if (project.scheduledVersion) { %>
          <a href="{{parentUrl}}/projects/<%=project.key%>/versions/<%=project.scheduledVersion.id%>"><%=project.scheduledVersion.name%></a>
        <% } else { %>
          - None -
        <% } %>
      </td>
      <td data-sort-value="<%=project.scheduledVersion ? project.scheduledVersion.releaseDate : ''%>">
        <% if (project.scheduledVersion) { %>
          <%=project.scheduledVersion.prettyReleaseDate ? project.scheduledVersion.prettyReleaseDate : 'not set'%>
        <% } %>
      </td>
    </tr>
</script>
<script type="text/underscore-template" id="projectTableTemplate">
    <table id='projectsTable' class='aui aui-table-sortable'>
        <thead>
          <th>Key</th>
          <th class="aui-table-column-unsortable">Current</th>
          <th>Date</th>
          <th class="aui-table-column-unsortable">Scheduled</th>
          <th>Date</th>
        </thead>
        <tbody></tbody>
    </table>
</script>
<script type="text/underscore-template" id="dashboardItemConfigTemplate">
    <form class='aui'>
        <div class='field-group'>
            <label for='itemTitle'>Title:<span class='aui-icon icon-required'>required</span></label>
            <input class='text medium-field' type='text' id='itemTitle' value='<%=itemTitle%>' />
        </div>
        <div class='field-group'>
            <label for='selectedProjects'>Projects:<span class='aui-icon icon-required'>required</span></label>
            <select class='select multi-select' id='selectedProjects' multiple></select>
        </div>
        <div class='buttons-container'>
            <button type='submit' id='saveConfiguration' class='aui-button'>Save</button>
        </div>
    </form>
</script>
<script type="text/javascript">

    var ProjectTableView = function() {
        return {
            setTitle: function(config) {
                if (config) {
                    AP.require(['jira'], function(jira) {
                        jira.setDashboardItemTitle(config.title);
                    });
                } else {
                    AP.require(['jira'], function(jira) {
                        jira.setDashboardItemTitle('Project Releases');
                    });
                }
            },
            template: function(value) {
                return _.template($('#projectTableTemplate').html())(value);
            },
            rowTemplate: function(project) {
                return _.template($('#projectTableRow').html())(project);
            },
            render: function(configuration) {
                $('#project-releases').html(this.template());
                this.setTitle(configuration);
                var that = this;
                var projectTableBody = $('#projectsTable tbody');
                var rowsAdded = 0;
                new ProjectService().getVersions(configuration.projects, function(project) {
                    projectTableBody.append(that.rowTemplate({project: project}));
                    rowsAdded++;
                    if (rowsAdded === configuration.projects.length){
                        AJS.tablessortable.setTableSortable(AJS.$("#projectsTable"));
                    }
                });
            }
        }
    };

    var ProjectService = function() {
        return {
            getVersions: function(projects, callback) {
                AP.require(['request'], function(request) {
                  $.each(projects, function(index, projectId){
                    request({
                        url: '/rest/api/2/project/' + projectId + '?expand=version',
                        success: function(response) {
                          let project = JSON.parse(response);
                          project.scheduledVersions = [];
                          $.each(project.versions, function(i, version) {
                            version.prettyReleaseDate = version.releaseDate ? new Date(version.releaseDate).toLocaleDateString() : '';
                            if (version.released){
                              if (!project.currentVersion || version.releaseDate > project.currentVersion.releaseDate){
                                project.currentVersion = version;
                              }
                            } else if (!version.archived) {
                              project.scheduledVersions.push(version);
                            }
                          });
                          project.scheduledVersion = project.scheduledVersions[0];
                          callback(project);
                        }
                    });
                  });
                });
            }
        }
    };

    var DashboardItemConfigurationView = function() {
        return {
            template: function(value) {
                return _.template($('#dashboardItemConfigTemplate').html())(value);
            },
            addProjects: function(config) {
                AP.require(['request'], function(request) {
                    request({
                        url: '/rest/api/2/project',
                        success: function(response) {
                            var projects = JSON.parse(response);
                            var selectedProject = $('#selectedProjects');
                            $.each(projects, function(index, project) {
                                var select = $('<option>', {value: project.id})
                                        .text(project.name);
                                if (config && config.projects && $.inArray(project.id, config.projects) !== -1) {
                                    selectedProject.append(select.attr('selected', 'selected'));
                                }
                                selectedProject.append(select);
                            });
                        }
                    });
                });

            },
            render: function(config) {
                if (config) {
                    $('#project-releases').html(this.template({itemTitle : config.title}));
                } else {
                    $('#project-releases').html(this.template({itemTitle : 'Project Releases'}));
                }
                this.addProjects(config);
                $('#saveConfiguration').click(function(e) {
                    e.preventDefault();
                    var service = new DashboardItemConfigurationService();
                    var $title = $('#itemTitle').val();
                    var $projects = $('#selectedProjects').find(':selected');
                    var projects = $projects.length === 0 ? null : $projects.map(function(i, el) { return $(el).val() });
                    var configuration = {projects: projects, title: $title};
                    service.save(configuration, function() {
                        new ProjectTableView().render(configuration);
                    });
                });
            }
        }
    };

    var DashboardItemConfigurationService = function() {
        return {
            getConfiguration: function(configuredCallback, errorCallback) {
                AP.require(['request'], function(request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties/itemkey',
                        success: function(response) {
                            configuredCallback(JSON.parse(response).value);
                        }
                    });
                });
            },
            isConfigured : function(configuredCallback, notConfiguredCallback) {
                var that = this;
                AP.require(['request'], function(request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties',
                        success: function(response) {
                            var arrayOfProperties = JSON.parse(response).keys;
                            var configured = _.find(arrayOfProperties, function(property) {
                                return "itemkey" == property.key;
                            });
                            if (configured) {
                                that.getConfiguration(configuredCallback)
                            } else {
                                notConfiguredCallback();
                            }
                        }
                    });
                });
            },
            save : function(configuration, successCallback) {
                AP.require(['request'], function(request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties/itemkey',
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(configuration),
                        success: successCallback
                    });
                });
            }
        }
    };

    var DashboardItemView = function() {
        return {
            render: function() {
                var service = new DashboardItemConfigurationService();
                service.isConfigured(function(config) {
                    new ProjectTableView().render(config)
                }, function() {
                    new DashboardItemConfigurationView().render();
                });
            }
        }
    };

    AP.require(['jira'], function (jira) {
        jira.DashboardItem.onDashboardItemEdit(function() {
            new DashboardItemConfigurationService().getConfiguration(function(config) {
                new DashboardItemConfigurationView().render(config);
            });
        });
    });

    new DashboardItemView().render();

</script>

</body>
</html>